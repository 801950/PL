/* adacTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. adacTokenManager.java */
package traductor;

/** Token Manager. */
public class adacTokenManager implements adacConstants {
        //lo declarado aquí estará en "ejemploTokenManager"
        //también estará, por ejemplo, "lengthOfMatch", "image", ...
        static int nPalInt = 0;
        static int valNums = 0;
        static void infoToken(String mensaje, Token token){
                System.out.println("(" + token.beginLine + "," + token.beginColumn + "): " + mensaje + " " + token.image);
        }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000L) != 0L)
            return 0;
         if ((active0 & 0x6303f7ffef0000L) != 0L)
         {
            jjmatchedKind = 58;
            return 40;
         }
         if ((active0 & 0x800L) != 0L)
            return 12;
         if ((active0 & 0x400L) != 0L)
            return 41;
         return -1;
      case 1:
         if ((active0 & 0x6302f3df6f0000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
            return 40;
         }
         if ((active0 & 0x10420800000L) != 0L)
            return 40;
         return -1;
      case 2:
         if ((active0 & 0x6002f103000000L) != 0L)
            return 40;
         if ((active0 & 0x30002dc6f0000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return 40;
         }
         return -1;
      case 3:
         if ((active0 & 0x20002146f0000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
            return 40;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
            return 42;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 17;
         if ((active0 & 0x10000c0000000L) != 0L)
            return 40;
         return -1;
      case 4:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
            return 43;
         }
         if ((active0 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
            return 42;
         }
         if ((active0 & 0x46e0000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
            return 40;
         }
         if ((active0 & 0x2000200010000L) != 0L)
            return 40;
         return -1;
      case 5:
         if ((active0 & 0x6e0000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
            return 40;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
            return 44;
         }
         if ((active0 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
            return 42;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 40;
         return -1;
      case 6:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 6;
            return 44;
         }
         if ((active0 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 6;
            return 42;
         }
         if ((active0 & 0x640000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 6;
            return 40;
         }
         if ((active0 & 0xa0000L) != 0L)
            return 40;
         return -1;
      case 7:
         if ((active0 & 0x1000000000L) != 0L)
            return 44;
         if ((active0 & 0x200000L) != 0L)
            return 40;
         if ((active0 & 0x18000000L) != 0L)
            return 42;
         if ((active0 & 0x440000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 7;
            return 40;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_0(0, 10, 41);
      case 39:
         return jjStartNfaWithStates_0(0, 11, 12);
      case 40:
         return jjStopAtPos(0, 8);
      case 41:
         return jjStopAtPos(0, 9);
      case 42:
         return jjStopAtPos(0, 52);
      case 43:
         return jjStopAtPos(0, 50);
      case 44:
         return jjStopAtPos(0, 12);
      case 45:
         return jjStartNfaWithStates_0(0, 51, 0);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 59:
         return jjStopAtPos(0, 20);
      case 60:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x880000000000L);
      case 61:
         return jjStopAtPos(0, 44);
      case 62:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 91:
         return jjStopAtPos(0, 13);
      case 93:
         return jjStopAtPos(0, 14);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x30000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10040000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20000400000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x180000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000200000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x28880000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3000400000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x6000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000040000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 62:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000001000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4006010000L);
      case 102:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 40);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x250040000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8108080000L);
      case 111:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 34, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x40020000020000L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000400000L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 40);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000200000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10040000L);
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 40);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 40);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 40);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 40);
         break;
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x420000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x100c080000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 118:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 40);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200020000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 40);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x10040000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 40);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x420000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 40);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1010200000L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x1010000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 40);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 44);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 40);
         break;
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 40);
         break;
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 18, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 40;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 5); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(10, 12); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(32, 35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 5); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(10, 12); }
                  }
                  break;
               case 12:
                  { jjCheckNAdd(13); }
                  if (curChar == 39)
                  {
                     if (kind > 56)
                        kind = 56;
                  }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(32, 34); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(19, 22); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(32, 35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 41:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(10, 6); }
                  if (curChar == 34)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(32, 35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     { jjCheckNAddTwoStates(25, 26); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(12, 13); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(26, 28); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 0:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 4:
               case 10:
                  if (curChar == 34)
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 6:
                  if (curChar == 34)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 7:
                  if (curChar == 34)
                     { jjCheckNAdd(6); }
                  break;
               case 8:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 9:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(10, 6); }
                  break;
               case 11:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 39 && kind > 56)
                     kind = 56;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddTwoStates(18, 20); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(29, 31); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddTwoStates(18, 21); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(25); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(26); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(19, 22); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(32, 34); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(10, 12); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(32, 35); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(32, 35); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 44:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 5); }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(30, 16); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  else if (curChar == 95)
                     { jjCheckNAdd(33); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(10, 12); }
                  }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(32, 35); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAdd(16); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(36, 39); }
                  break;
               case 43:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 5); }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(30, 16); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  else if (curChar == 95)
                     { jjCheckNAdd(33); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(10, 12); }
                  }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(36, 39); }
                  else if (curChar == 95)
                     { jjCheckNAdd(16); }
                  break;
               case 12:
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(32, 34); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddTwoStates(18, 21); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(19, 22); }
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(32, 35); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(30, 16); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  else if (curChar == 95)
                     { jjCheckNAdd(33); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(36, 39); }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if (curChar == 95)
                     { jjCheckNAdd(16); }
                  break;
               case 41:
               case 5:
                  { jjCheckNAddStates(23, 25); }
                  break;
               case 42:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(32, 35); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAdd(33); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if (curChar == 95)
                     { jjCheckNAdd(16); }
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(40, 45); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(46, 48); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 1:
                  { jjAddStates(49, 50); }
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 15:
                  if (curChar == 95)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 18:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddTwoStates(18, 20); }
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(29, 31); }
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddTwoStates(18, 21); }
                  break;
               case 22:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(40, 45); }
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(36, 39); }
                  break;
               case 29:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(30, 16); }
                  break;
               case 30:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(19, 22); }
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 32:
                  if (curChar == 95)
                     { jjCheckNAdd(33); }
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(32, 34); }
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(10, 12); }
                  break;
               case 35:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(32, 35); }
                  break;
               case 36:
                  if (curChar == 95)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 38:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(37, 33); }
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(32, 35); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 41:
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(49, 50); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 40 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\50", "\51", "\42", "\47", 
"\54", "\133", "\135", null, "\142\145\147\151\156", "\142\157\157\154\145\141\156", 
"\143\150\141\162\141\143\164\145\162", "\151\156\164\145\147\145\162", "\73", "\146\165\156\143\164\151\157\156", 
"\160\162\157\143\145\144\165\162\145", "\151\163", "\166\141\154", "\162\145\146", "\162\145\164\165\162\156", 
"\151\156\164\62\143\150\141\162", "\143\150\141\162\62\151\156\164", "\151\146", "\164\150\145\156", 
"\145\154\163\145", "\145\156\144", "\167\150\151\154\145", "\144\157", "\72\75", 
"\160\165\164\137\154\151\156\145", "\160\165\164", "\147\145\164", "\141\156\144", "\157\162", "\156\157\164", 
"\76\75", "\74\75", "\75", "\76", "\74", "\74\76", "\164\162\165\145", 
"\146\141\154\163\145", "\53", "\55", "\52", "\144\151\166", "\155\157\144", null, null, null, null, 
null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   28, 15, 14, 22, 29, 31, 15, 14, 22, 23, 32, 35, 34, 15, 14, 22, 
   15, 22, 23, 28, 22, 29, 31, 7, 5, 8, 5, 8, 9, 18, 21, 20, 
   32, 35, 38, 39, 28, 14, 22, 29, 28, 14, 22, 32, 35, 29, 30, 16, 
   37, 1, 2, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 59)
   {
      jjmatchedKind = 59;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        infoToken("comentario",matchedToken);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                        infoToken("parentesis de apertura",matchedToken);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                        infoToken("parentesis de clausura",matchedToken);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                        infoToken("comillas dobles",matchedToken);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                        infoToken("comillas simples",matchedToken);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                        infoToken("coma", matchedToken);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                        infoToken("corchete de apertura", matchedToken);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                        infoToken("corchete de apertura", matchedToken);
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        infoToken("numero",matchedToken);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                        infoToken("inicio de programa",matchedToken);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                        infoToken("tipo de dato",matchedToken);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                        infoToken("tipo de dato",matchedToken);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                        infoToken("tipo de dato",matchedToken);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                         infoToken("fin de instrucci\u00f3n", matchedToken);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                         infoToken("inicio cabecera funci\u00f3n", matchedToken);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                         infoToken("inicio cabecera procedimiento", matchedToken);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                        infoToken("fin cabecera funci\u00f3n/procedimiento", matchedToken);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                        infoToken("par\u00e1metro por valor", matchedToken);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                        infoToken("par\u00e1metro por referecia", matchedToken);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                        infoToken("valor devuelto", matchedToken);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                        infoToken("funci\u00f3n", matchedToken);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                        infoToken("funci\u00f3n", matchedToken);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                        infoToken("sentencia", matchedToken);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                        infoToken("sentencia", matchedToken);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                        infoToken("sentencia", matchedToken);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                        infoToken("fin de sentencia", matchedToken);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                        infoToken("bucle", matchedToken);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                        infoToken("sentencia", matchedToken);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                        infoToken("operador de asignaci\u00f3n", matchedToken);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                        infoToken("escritura de una l\u00ednea", matchedToken);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                        infoToken("escritura de un caracter", matchedToken);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                        infoToken("lectura de un caracter", matchedToken);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                        infoToken("operador l\u00f3gico", matchedToken);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                        infoToken("operador l\u00f3gico", matchedToken);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                        infoToken("operador l\u00f3gico", matchedToken);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                        infoToken("operador l\u00f3gico", matchedToken);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                        infoToken("operador l\u00f3gico", matchedToken);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                        infoToken("operador l\u00f3gico", matchedToken);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                        infoToken("operador l\u00f3gico", matchedToken);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                        infoToken("operador l\u00f3gico", matchedToken);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                        infoToken("operador l\u00f3gico", matchedToken);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                        infoToken("constante l\u00f3gica", matchedToken);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                        infoToken("constante l\u00f3gica", matchedToken);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                        infoToken("operador aritm\u00e9tico", matchedToken);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                        infoToken("operador aritm\u00e9tico", matchedToken);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                        infoToken("operador aritm\u00e9tico", matchedToken);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                        infoToken("operador aritm\u00e9tico", matchedToken);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                        infoToken("operador aritm\u00e9tico", matchedToken);
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        infoToken("cadena de caracteres", matchedToken);
         break;
      case 56 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        infoToken("caracter", matchedToken);
         break;
      case 57 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("ERROR L\u00c9XICO: (" + matchedToken.beginLine + "," + matchedToken.beginColumn + "): s\u00edmbolo no reconocido " + matchedToken.image);
         break;
      case 58 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        infoToken("identificador", matchedToken);
         break;
      case 59 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("ERROR L\u00c9XICO: (" + matchedToken.beginLine + "," + matchedToken.beginColumn + "): s\u00edmbolo no reconocido " + matchedToken.image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public adacTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public adacTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 40; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff81L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[40];
    static private final int[] jjstateSet = new int[2 * 40];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
