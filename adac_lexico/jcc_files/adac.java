/* adac.java */
/* Generated By:JavaCC: Do not edit this line. adac.java */
package traductor;

public class adac implements adacConstants {
    public static void main(String[] args) {
        adac parser;

        try {
                if(args.length == 0) { //entrada desde stdin
                                parser = new adac(System.in);
                        }
                        else { //entrada desde fichero en args[0]
                    parser = new adac(new java.io.FileInputStream(args[0]));
                        }
                        parser.S(); //invoca símbolo inicial de la gramática
                }
                catch (java.io.FileNotFoundException e) {
                        System.err.println ("Fichero " + args[0] + " no encontrado.");
                }
                catch (TokenMgrError e) {
                System.err.println("LEX_ERROR: " + e.getMessage());
        }
        catch (ParseException e) {
                System.err.println("SINT_ERROR: " + e.getMessage());
        }
    }

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void S() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tBEGIN:{
        jj_consume_token(tBEGIN);
        break;
        }
      case tBOOL:{
        jj_consume_token(tBOOL);
        break;
        }
      case tCHAR:{
        jj_consume_token(tCHAR);
        break;
        }
      case tCOM:{
        jj_consume_token(tCOM);
        break;
        }
      case tEOL:{
        jj_consume_token(tEOL);
        break;
        }
      case tID:{
        jj_consume_token(tID);
        break;
        }
      case tINT:{
        jj_consume_token(tINT);
        break;
        }
      case tERROR:{
        jj_consume_token(tERROR);
        break;
        }
      case tIDERR:{
        jj_consume_token(tIDERR);
        break;
        }
      case tIF:{
        jj_consume_token(tIF);
        break;
        }
      case tTHEN:{
        jj_consume_token(tTHEN);
        break;
        }
      case tELSE:{
        jj_consume_token(tELSE);
        break;
        }
      case tEND:{
        jj_consume_token(tEND);
        break;
        }
      case tWHILE:{
        jj_consume_token(tWHILE);
        break;
        }
      case tDO:{
        jj_consume_token(tDO);
        break;
        }
      case tASIG:{
        jj_consume_token(tASIG);
        break;
        }
      case tPUT:{
        jj_consume_token(tPUT);
        break;
        }
      case tAND:{
        jj_consume_token(tAND);
        break;
        }
      case tOR:{
        jj_consume_token(tOR);
        break;
        }
      case tNOT:{
        jj_consume_token(tNOT);
        break;
        }
      case tMAYEQ:{
        jj_consume_token(tMAYEQ);
        break;
        }
      case tMENEQ:{
        jj_consume_token(tMENEQ);
        break;
        }
      case tEQ:{
        jj_consume_token(tEQ);
        break;
        }
      case tMAY:{
        jj_consume_token(tMAY);
        break;
        }
      case tMEN:{
        jj_consume_token(tMEN);
        break;
        }
      case tDIST:{
        jj_consume_token(tDIST);
        break;
        }
      case tTRUE:{
        jj_consume_token(tTRUE);
        break;
        }
      case tFALSE:{
        jj_consume_token(tFALSE);
        break;
        }
      case tPOPEN:{
        jj_consume_token(tPOPEN);
        break;
        }
      case tPCLOSE:{
        jj_consume_token(tPCLOSE);
        break;
        }
      case tC2:{
        jj_consume_token(tC2);
        break;
        }
      case tC1:{
        jj_consume_token(tC1);
        break;
        }
      case tVAL:{
        jj_consume_token(tVAL);
        break;
        }
      case tREF:{
        jj_consume_token(tREF);
        break;
        }
      case tFUNC:{
        jj_consume_token(tFUNC);
        break;
        }
      case tPROC:{
        jj_consume_token(tPROC);
        break;
        }
      case tCOMA:{
        jj_consume_token(tCOMA);
        break;
        }
      case tRET:{
        jj_consume_token(tRET);
        break;
        }
      case tIS:{
        jj_consume_token(tIS);
        break;
        }
      case tCORCHETEOPEN:{
        jj_consume_token(tCORCHETEOPEN);
        break;
        }
      case tCORCHETECLOSE:{
        jj_consume_token(tCORCHETECLOSE);
        break;
        }
      case tGET:{
        jj_consume_token(tGET);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOM:
      case tPOPEN:
      case tPCLOSE:
      case tC2:
      case tC1:
      case tCOMA:
      case tCORCHETEOPEN:
      case tCORCHETECLOSE:
      case tBEGIN:
      case tBOOL:
      case tCHAR:
      case tINT:
      case tEOL:
      case tFUNC:
      case tPROC:
      case tIS:
      case tVAL:
      case tREF:
      case tRET:
      case tIF:
      case tTHEN:
      case tELSE:
      case tEND:
      case tWHILE:
      case tDO:
      case tASIG:
      case tPUT:
      case tGET:
      case tAND:
      case tOR:
      case tNOT:
      case tMAYEQ:
      case tMENEQ:
      case tEQ:
      case tMAY:
      case tMEN:
      case tDIST:
      case tTRUE:
      case tFALSE:
      case tIDERR:
      case tID:
      case tERROR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public adacTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xffffff80,0xffffff80,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x3fffd,0x3fffd,};
	}

  /** Constructor with InputStream. */
  public adac(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public adac(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new adacTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public adac(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new adacTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new adacTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public adac(adacTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(adacTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[50];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 50; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
