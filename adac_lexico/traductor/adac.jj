//*****************************************************************
// File:   adac.jj
// Author: Nerea Gallego, César Borja
// Date:   ...........
// Coms:   Un tutorial sobre el análisis léxico con javacc
//         https://javacc.github.io/javacc/tutorials/token-manager.html
//*****************************************************************

// options {
//   IGNORE_CASE = false;
//   COMMON_TOKEN_ACTION = false;
//   ...
// }

PARSER_BEGIN(adac)
package traductor;

public class adac {
    public static void main(String[] args) {
    	adac parser;

    	try {
	    	if(args.length == 0) { //entrada desde stdin
				parser = new adac(System.in);
			}
			else { //entrada desde fichero en args[0]
	            parser = new adac(new java.io.FileInputStream(args[0])); 
			}
			parser.S(); //invoca símbolo inicial de la gramática
		}
		catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		}
		catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        }
        catch (ParseException e) {
        	System.err.println("SINT_ERROR: " + e.getMessage());
        } 
    }
}
PARSER_END(adac)
//------------ descripción del AL
SKIP :
{
	" "
|	"\t"
|	"\n"
	
}
//---------------------------------------------------------
TOKEN_MGR_DECLS : {
	//lo declarado aquí estará en "ejemploTokenManager"
	//también estará, por ejemplo, "lengthOfMatch", "image", ...
	static int nPalInt = 0;
	static int valNums = 0;
	static void infoToken(String mensaje, Token token){
		System.out.println("(" + token.beginLine + "," + token.beginColumn + "): " + mensaje + " " + token.image);
	}
}

TOKEN :
{
 	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
|	< #ALNUM: (< LETTER > | < DIGIT >) >
|   < tCOM: "--"(~["\n"])*"\n" >
		{
			infoToken("comentario",matchedToken);
		}

}

TOKEN :
{
 	< tBEGIN: "begin" >
 		{
			//infoToken("comentario",matchedToken);
 			//mostrar la información pedida
 		}
|	< tBOOL: "boolean" >
		 {
			infoToken("tipo de dato",matchedToken);
		 }
|	< tCHAR: "character" >
		{
			infoToken("tipo de dato",matchedToken);
		}
| 	< tINT: "integer" >
		{
			infoToken("tipo de dato",matchedToken);
		}
|	< tEOL: ";" >
		 {
			 infoToken("fin de instrucción", matchedToken);
		 }
}

TOKEN : 
{
	< tIDERR: (< LETTER > | ("_"(< ALNUM >)+)*) (< ALNUM > | "_" (< ALNUM >)+)* 			"__" (< ALNUM > | "_" (< ALNUM >)+)* >
		{
			System.out.println("ERROR LÉXICO: (" + matchedToken.beginLine + "," + matchedToken.beginColumn + "): símbolo no reconocido " + matchedToken.image);
		}
|	< tID: (< LETTER > | ("_"(< ALNUM >)+)*) (< ALNUM >)* ("_" (< ALNUM >)+)* 				(< ALNUM >)* >
//	< tID: (< LETTER > | ("_"(< ALNUM >)+)*) (< ALNUM > | "_" (< ALNUM >)+)* >
		{
			infoToken("identificador", matchedToken);
		}
}

TOKEN :
{   
	< tERROR: ~[] >
		{
			System.out.println("ERROR LÉXICO: (" + matchedToken.beginLine + "," + matchedToken.beginColumn + "): símbolo no reconocido " + matchedToken.image);
		}

}

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
void S () : 
{

}
{
	( 
		< tBEGIN > | < tBOOL > | < tCHAR > | < tCOM > | < tEOL > | < tID > | < tINT > | < tERROR > | < tIDERR >
	)+
	< EOF >
}