-- Girar imagen en blanco y negro 180º

--Formato del fichero que se debe pasar por la entrada estándar:

--P5
--fils cols
--max_gris
--pixels por filas (one byte per pixel, binary)

procedure test_5 is
    integer formato; 
	integer fils, cols; 
	integer max_gris; 
	character image [500000];
    character rotated [500000];

    ---------------------------------------------------
	function integer indice (val integer fils, cols; val integer i, j) is 
	begin
		return i*cols + j; 
	end

    ---------------------------------------------------
    function boolean cargar_imagen (ref integer formato, fils, cols, prof; ref character imagen [500000]) is
		character c; 
		integer i, j; 
	begin
		get (c); 
		get (formato); 
		get (fils); 
		get (cols); 
		get (max_gris); 
		skip_line (); 
		
        if fils*cols > 500000 then
            put_line ("Imagen de dimensiones (", fils, ", ", cols, ") demasiado grande (max 500000 pixels)!");
            return false;
        else
            i := 0; 
            while i < fils do
                j := 0; 
                while j < cols do
                    get(imagen [indice (fils, cols, i, j)]); 
                    j := j + 1; 
                end
                i := i + 1; 
            end
            return true;
        end
	end

    ---------------------------------------------------
	procedure guardar_imagen (val integer formato, fils, cols, prof; ref character imagen [500000]) is
		character c; 
		integer i, j; 
	begin
		put_line ('P', formato); 
		put_line (fils, ' ', cols); 
		put_line (prof); 
		i := 0; 
		while i < fils do
			j := 0; 
			while j < cols do
				put (imagen [indice (fils, cols, i, j)]); 
				j := j + 1; 
			end
			i := i + 1; 
		end
	end

    ---------------------------------------------------
	-- devuelve en 'rotated' la imagen 'imagen' girada 180º
    procedure girar_imagen (val integer fils, cols, prof; ref character imagen [500000], rotated [500000]) is
		character c; 
		integer i, j, idx, idx_r;
	begin
		i := 0;
		while i < fils do
			j := 0;
			while j < cols do
                idx := indice (fils, cols, i, j);
                idx_r := indice (fils, cols, fils-i, cols-j);
                rotated[idx_r] := imagen[idx];
				j := j + 1;
			end
			i := i + 1;
		end
	end

    ---------------------------------------------------
begin
    if cargar_imagen (formato, fils, cols, max_gris, image) then
        girar_imagen (fils, cols, max_gris, image, rotated); 
        guardar_imagen (formato, fils, cols, max_gris, rotated);
    end
end
