/* adac.java */
/* Generated By:JavaCC: Do not edit this line. adac.java */
package traductor;

public class adac implements adacConstants {
    public static void main(String[] args) {
        adac parser;

        try {
                if(args.length == 0) { //entrada desde stdin
                                parser = new adac(System.in);
                        }
                        else { //entrada desde fichero en args[0]
                    parser = new adac(new java.io.FileInputStream(args[0]));
                        }
                        parser.S(); //invoca símbolo inicial de la gramática
                }
                catch (java.io.FileNotFoundException e) {
                        System.err.println ("Fichero " + args[0] + " no encontrado.");
                }
                catch (TokenMgrError e) {
                System.err.println("LEX_ERROR: " + e.getMessage());
        }
        catch (ParseException e) {
                System.err.println("SINT_ERROR: " + e.getMessage());
        }
    }

  static final public void S() throws ParseException {
    trace_call("S");
    try {

      prog();
      jj_consume_token(0);
    } finally {
      trace_return("S");
    }
}

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void prog() throws ParseException {
    trace_call("prog");
    try {

      jj_consume_token(tPROC);
      jj_consume_token(tID);
      jj_consume_token(tIS);
      declaracion_variables();
      declaracion_procs_funcs();
      bloque_sentencias();
    } finally {
      trace_return("prog");
    }
}

  static final public void declaracion_variables() throws ParseException {
    trace_call("declaracion_variables");
    try {

      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tBOOL:
        case tCHAR:
        case tINT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        declaracion();
        jj_consume_token(tPC);
      }
    } finally {
      trace_return("declaracion_variables");
    }
}

  static final public void declaracion() throws ParseException {
    trace_call("declaracion");
    try {

      tipo_variable();
      lista_vars();
    } finally {
      trace_return("declaracion");
    }
}

  static final public void tipo_variable() throws ParseException {
    trace_call("tipo_variable");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tINT:{
        jj_consume_token(tINT);
        break;
        }
      case tCHAR:{
        jj_consume_token(tCHAR);
        break;
        }
      case tBOOL:{
        jj_consume_token(tBOOL);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo_variable");
    }
}

  static final public void lista_vars() throws ParseException {
    trace_call("lista_vars");
    try {

      variable();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMA:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(tCOMA);
        variable();
      }
    } finally {
      trace_return("lista_vars");
    }
}

  static final public void variable() throws ParseException {
    trace_call("variable");
    try {

      if (jj_2_1(2)) {
        jj_consume_token(tID);
        jj_consume_token(tCORCHETEOPEN);
        jj_consume_token(tNUM);
        jj_consume_token(tCORCHETECLOSE);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          jj_consume_token(tID);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("variable");
    }
}

  static final public void declaracion_procs_funcs() throws ParseException {
    trace_call("declaracion_procs_funcs");
    try {

      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tFUNC:
        case tPROC:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        declaracion_proc_func();
      }
    } finally {
      trace_return("declaracion_procs_funcs");
    }
}

  static final public void declaracion_proc_func() throws ParseException {
    trace_call("declaracion_proc_func");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROC:{
        cabecera_procedimiento();
        break;
        }
      case tFUNC:{
        cabecera_funcion();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      declaracion_variables();
      bloque_sentencias();
    } finally {
      trace_return("declaracion_proc_func");
    }
}

  static final public void cabecera_procedimiento() throws ParseException {
    trace_call("cabecera_procedimiento");
    try {

      jj_consume_token(tPROC);
      jj_consume_token(tID);
      jj_consume_token(tPOPEN);
      lista_parametros();
      jj_consume_token(tPCLOSE);
      jj_consume_token(tIS);
    } finally {
      trace_return("cabecera_procedimiento");
    }
}

  static final public void cabecera_funcion() throws ParseException {
    trace_call("cabecera_funcion");
    try {

      jj_consume_token(tFUNC);
      tipo_variable();
      jj_consume_token(tID);
      jj_consume_token(tPOPEN);
      lista_parametros();
      jj_consume_token(tPCLOSE);
      jj_consume_token(tIS);
    } finally {
      trace_return("cabecera_funcion");
    }
}

  static final public void lista_parametros() throws ParseException {
    trace_call("lista_parametros");
    try {

      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tVAL:
        case tREF:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        parametro();
      }
    } finally {
      trace_return("lista_parametros");
    }
}

  static final public void parametro() throws ParseException {
    trace_call("parametro");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tVAL:{
        jj_consume_token(tVAL);
        break;
        }
      case tREF:{
        jj_consume_token(tREF);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tipo_variable();
      lista_vars();
    } finally {
      trace_return("parametro");
    }
}

  static final public void bloque_sentencias() throws ParseException {
    trace_call("bloque_sentencias");
    try {

      jj_consume_token(tBEGIN);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tRET:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        inst();
      }
      jj_consume_token(tEND);
    } finally {
      trace_return("bloque_sentencias");
    }
}

  static final public void inst() throws ParseException {
    trace_call("inst");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tRET:
      case tID:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          inst_asignacion();
          break;
          }
        case tRET:{
          inst_return();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(tPC);
        break;
        }
      case tWHILE:{
        inst_iteracion();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("inst");
    }
}

  static final public void inst_asignacion() throws ParseException {
    trace_call("inst_asignacion");
    try {

      variable();
      jj_consume_token(tASIG);
      expresion();
    } finally {
      trace_return("inst_asignacion");
    }
}

  static final public void inst_iteracion() throws ParseException {
    trace_call("inst_iteracion");
    try {

      jj_consume_token(tWHILE);
      expresion();
      jj_consume_token(tDO);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tRET:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        inst();
      }
      jj_consume_token(tEND);
    } finally {
      trace_return("inst_iteracion");
    }
}

  static final public void inst_return() throws ParseException {
    trace_call("inst_return");
    try {

      jj_consume_token(tRET);
      expresion();
    } finally {
      trace_return("inst_return");
    }
}

  static final public void lista_cero_o_mas_exps() throws ParseException {
    trace_call("lista_cero_o_mas_exps");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPOPEN:
      case tNUM:
      case tINT2CHAR:
      case tCHAR2INT:
      case tNOT:
      case tTRUE:
      case tFALSE:
      case tSUM:
      case tRES:
      case tSTRING:
      case tCARACTER:
      case tID:{
        lista_una_o_mas_exps();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } finally {
      trace_return("lista_cero_o_mas_exps");
    }
}

  static final public void lista_una_o_mas_exps() throws ParseException {
    trace_call("lista_una_o_mas_exps");
    try {

      expresion();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPOPEN:
      case tNUM:
      case tINT2CHAR:
      case tCHAR2INT:
      case tNOT:
      case tTRUE:
      case tFALSE:
      case tSUM:
      case tRES:
      case tSTRING:
      case tCARACTER:
      case tID:{
        lista_una_o_mas_exps();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } finally {
      trace_return("lista_una_o_mas_exps");
    }
}

  static final public void expresion() throws ParseException {
    trace_call("expresion");
    try {

      expresion_simple();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMAYEQ:
      case tMENEQ:
      case tEQ:
      case tMAY:
      case tMEN:
      case tDIST:{
        operador_relacional();
        expresion_simple();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } finally {
      trace_return("expresion");
    }
}

  static final public void operador_relacional() throws ParseException {
    trace_call("operador_relacional");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tEQ:{
        jj_consume_token(tEQ);
        break;
        }
      case tMAYEQ:{
        jj_consume_token(tMAYEQ);
        break;
        }
      case tMENEQ:{
        jj_consume_token(tMENEQ);
        break;
        }
      case tMAY:{
        jj_consume_token(tMAY);
        break;
        }
      case tMEN:{
        jj_consume_token(tMEN);
        break;
        }
      case tDIST:{
        jj_consume_token(tDIST);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("operador_relacional");
    }
}

  static final public void expresion_simple() throws ParseException {
    trace_call("expresion_simple");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUM:
      case tRES:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tSUM:{
          jj_consume_token(tSUM);
          break;
          }
        case tRES:{
          jj_consume_token(tRES);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      termino();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tOR:
        case tSUM:
        case tRES:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_7;
        }
        operador_aditivo();
        termino();
      }
    } finally {
      trace_return("expresion_simple");
    }
}

  static final public void operador_aditivo() throws ParseException {
    trace_call("operador_aditivo");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUM:{
        jj_consume_token(tSUM);
        break;
        }
      case tRES:{
        jj_consume_token(tRES);
        break;
        }
      case tOR:{
        jj_consume_token(tOR);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("operador_aditivo");
    }
}

  static final public void termino() throws ParseException {
    trace_call("termino");
    try {

      factor();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tAND:
        case tMUL:
        case tDIV:
        case tMOD:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        operador_multiplicativo();
        factor();
      }
    } finally {
      trace_return("termino");
    }
}

  static final public void operador_multiplicativo() throws ParseException {
    trace_call("operador_multiplicativo");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMUL:{
        jj_consume_token(tMUL);
        break;
        }
      case tMOD:{
        jj_consume_token(tMOD);
        break;
        }
      case tDIV:{
        jj_consume_token(tDIV);
        break;
        }
      case tAND:{
        jj_consume_token(tAND);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("operador_multiplicativo");
    }
}

  static final public void factor() throws ParseException {
    trace_call("factor");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNOT:{
        jj_consume_token(tNOT);
        factor();
        break;
        }
      case tPOPEN:{
        jj_consume_token(tPOPEN);
        expresion();
        jj_consume_token(tPCLOSE);
        break;
        }
      case tINT2CHAR:{
        jj_consume_token(tINT2CHAR);
        jj_consume_token(tPOPEN);
        expresion();
        jj_consume_token(tPCLOSE);
        break;
        }
      case tCHAR2INT:{
        jj_consume_token(tCHAR2INT);
        jj_consume_token(tPOPEN);
        expresion();
        jj_consume_token(tPCLOSE);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        if (jj_2_2(2)) {
          jj_consume_token(tID);
          jj_consume_token(tPOPEN);
          lista_cero_o_mas_exps();
          jj_consume_token(tPCLOSE);
        } else if (jj_2_3(2)) {
          jj_consume_token(tID);
          jj_consume_token(tCORCHETEOPEN);
          expresion();
          jj_consume_token(tCORCHETECLOSE);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tID:{
            jj_consume_token(tID);
            break;
            }
          case tNUM:{
            jj_consume_token(tNUM);
            break;
            }
          case tCARACTER:{
            jj_consume_token(tCARACTER);
            break;
            }
          case tSTRING:{
            jj_consume_token(tSTRING);
            break;
            }
          case tTRUE:{
            jj_consume_token(tTRUE);
            break;
            }
          case tFALSE:{
            jj_consume_token(tFALSE);
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("factor");
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tCORCHETEOPEN)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tPOPEN)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tCORCHETEOPEN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public adacTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1c0000,0x1c0000,0x1000,0x0,0x600000,0x600000,0x3000000,0x3000000,0x4000000,0x4000000,0x4000000,0x4000000,0x18010100,0x18010100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000100,0x10000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x2000002,0x2000000,0x2000002,0x2000002,0x38f0200,0x38f0200,0xfc00,0xfc00,0xc0000,0xc0000,0xc0100,0xc0100,0x700080,0x700080,0x200,0x3830000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public adac(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public adac(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new adacTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public adac(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new adacTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new adacTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public adac(adacTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(adacTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[59];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 24; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 59; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  static private int trace_indent = 0;
/** Enable tracing. */
  static final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
	 trace_enabled = false;
  }

  static protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  static protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  static protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 3; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
